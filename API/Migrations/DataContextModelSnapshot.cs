// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserRole")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 6, 15, 159, 219, 253, 234, 203, 60, 24, 183, 230, 184, 241, 94, 168, 100, 63, 22, 47, 239, 229, 157, 33, 112, 186, 103, 96, 121, 7, 60, 221, 214, 188, 166, 62, 182, 89, 145, 122, 239, 220, 209, 198, 81, 239, 37, 26, 117, 69, 195, 31, 208, 84, 106, 50, 9, 58, 191, 113, 150, 32, 224, 254, 212 },
                            PasswordSalt = new byte[] { 121, 205, 174, 161, 177, 240, 31, 88, 164, 21, 77, 61, 85, 175, 47, 162, 149, 103, 129, 238, 43, 9, 24, 92, 145, 172, 135, 185, 189, 147, 227, 10, 94, 144, 169, 240, 139, 205, 14, 181, 228, 129, 143, 230, 189, 254, 94, 21, 122, 55, 141, 9, 230, 229, 117, 88, 17, 67, 94, 85, 156, 152, 134, 57, 199, 85, 185, 54, 197, 150, 200, 188, 118, 60, 115, 176, 56, 71, 185, 49, 80, 98, 109, 240, 218, 77, 200, 124, 16, 183, 130, 5, 233, 169, 51, 112, 111, 185, 59, 165, 226, 245, 210, 197, 121, 64, 3, 254, 222, 63, 120, 2, 251, 48, 3, 133, 126, 213, 223, 2, 79, 73, 107, 195, 61, 183, 89, 151 },
                            UserName = "Admin",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 6, 15, 159, 219, 253, 234, 203, 60, 24, 183, 230, 184, 241, 94, 168, 100, 63, 22, 47, 239, 229, 157, 33, 112, 186, 103, 96, 121, 7, 60, 221, 214, 188, 166, 62, 182, 89, 145, 122, 239, 220, 209, 198, 81, 239, 37, 26, 117, 69, 195, 31, 208, 84, 106, 50, 9, 58, 191, 113, 150, 32, 224, 254, 212 },
                            PasswordSalt = new byte[] { 121, 205, 174, 161, 177, 240, 31, 88, 164, 21, 77, 61, 85, 175, 47, 162, 149, 103, 129, 238, 43, 9, 24, 92, 145, 172, 135, 185, 189, 147, 227, 10, 94, 144, 169, 240, 139, 205, 14, 181, 228, 129, 143, 230, 189, 254, 94, 21, 122, 55, 141, 9, 230, 229, 117, 88, 17, 67, 94, 85, 156, 152, 134, 57, 199, 85, 185, 54, 197, 150, 200, 188, 118, 60, 115, 176, 56, 71, 185, 49, 80, 98, 109, 240, 218, 77, 200, 124, 16, 183, 130, 5, 233, 169, 51, 112, 111, 185, 59, 165, 226, 245, 210, 197, 121, 64, 3, 254, 222, 63, 120, 2, 251, 48, 3, 133, 126, 213, 223, 2, 79, 73, 107, 195, 61, 183, 89, 151 },
                            UserName = "Robb",
                            UserRole = 2
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 6, 15, 159, 219, 253, 234, 203, 60, 24, 183, 230, 184, 241, 94, 168, 100, 63, 22, 47, 239, 229, 157, 33, 112, 186, 103, 96, 121, 7, 60, 221, 214, 188, 166, 62, 182, 89, 145, 122, 239, 220, 209, 198, 81, 239, 37, 26, 117, 69, 195, 31, 208, 84, 106, 50, 9, 58, 191, 113, 150, 32, 224, 254, 212 },
                            PasswordSalt = new byte[] { 121, 205, 174, 161, 177, 240, 31, 88, 164, 21, 77, 61, 85, 175, 47, 162, 149, 103, 129, 238, 43, 9, 24, 92, 145, 172, 135, 185, 189, 147, 227, 10, 94, 144, 169, 240, 139, 205, 14, 181, 228, 129, 143, 230, 189, 254, 94, 21, 122, 55, 141, 9, 230, 229, 117, 88, 17, 67, 94, 85, 156, 152, 134, 57, 199, 85, 185, 54, 197, 150, 200, 188, 118, 60, 115, 176, 56, 71, 185, 49, 80, 98, 109, 240, 218, 77, 200, 124, 16, 183, 130, 5, 233, 169, 51, 112, 111, 185, 59, 165, 226, 245, 210, 197, 121, 64, 3, 254, 222, 63, 120, 2, 251, 48, 3, 133, 126, 213, 223, 2, 79, 73, 107, 195, 61, 183, 89, 151 },
                            UserName = "Elise",
                            UserRole = 2
                        });
                });

            modelBuilder.Entity("API.Entities.AppUserCourse", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppUserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AppUserCourses");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            CourseId = 1
                        },
                        new
                        {
                            AppUserId = 1,
                            CourseId = 2
                        },
                        new
                        {
                            AppUserId = 1,
                            CourseId = 3
                        },
                        new
                        {
                            AppUserId = 2,
                            CourseId = 3
                        });
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 2,
                            Name = "Assimil French with Ease"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            Name = "Assimil Using French"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 3,
                            Name = "Assimil Norwegian"
                        });
                });

            modelBuilder.Entity("API.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "French"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Norwegian"
                        });
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonAudio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            LessonAudio = "localpath",
                            Name = "Introduction - Assimil French with Ease",
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            LessonAudio = "localpath",
                            Name = "Lesson 2",
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            LessonAudio = "localpath",
                            Name = "Lesson 3",
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            LessonAudio = "localpath",
                            Name = "Introduction - Assimil Using French",
                            Number = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            LessonAudio = "localpath",
                            Name = "Lesson 2",
                            Number = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            LessonAudio = "localpath",
                            Name = "Lesson 3",
                            Number = 3
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 3,
                            LessonAudio = "localpath",
                            Name = "Introduction - Assimil Norwegian",
                            Number = 1
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 3,
                            LessonAudio = "localpath",
                            Name = "Lesson 2",
                            Number = 2
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 3,
                            LessonAudio = "localpath",
                            Name = "Lesson 3",
                            Number = 3
                        });
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordedAudio")
                        .HasColumnType("TEXT");

                    b.Property<string>("SentenceAudio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LessonId");

                    b.ToTable("Sentences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 2,
                            LessonId = 1,
                            Number = 1,
                            RecordedAudio = "local path",
                            SentenceAudio = "local path",
                            Text = "This is the first sentence in French"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            LessonId = 1,
                            Number = 2,
                            RecordedAudio = "local path",
                            SentenceAudio = "local path",
                            Text = "This is the second sentence in French"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 2,
                            LessonId = 1,
                            Number = 3,
                            RecordedAudio = "local path",
                            SentenceAudio = "local path",
                            Text = "This is the third sentence in French"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            LessonId = 1,
                            Number = 4,
                            RecordedAudio = "local path",
                            SentenceAudio = "local path",
                            Text = "This is the fourth sentence in French"
                        });
                });

            modelBuilder.Entity("API.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TranslatedText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SentenceId");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            SentenceId = 1,
                            TranslatedText = "This is the English translation of the first sentence"
                        });
                });

            modelBuilder.Entity("API.Entities.AppUserCourse", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("AppUserCourses")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Course", "Course")
                        .WithMany("AppUserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.HasOne("API.Entities.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.HasOne("API.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.HasOne("API.Entities.Language", "Language")
                        .WithMany("Sentences")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Lesson", "Lesson")
                        .WithMany("Sentences")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("API.Entities.Translation", b =>
                {
                    b.HasOne("API.Entities.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Sentence", "Sentence")
                        .WithMany("Translations")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserCourses");
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.Navigation("AppUserCourses");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("API.Entities.Language", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Sentences");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.Navigation("Sentences");
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
